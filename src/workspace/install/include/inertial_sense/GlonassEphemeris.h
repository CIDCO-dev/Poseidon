// Generated by gencpp from file inertial_sense/GlonassEphemeris.msg
// DO NOT EDIT!


#ifndef INERTIAL_SENSE_MESSAGE_GLONASSEPHEMERIS_H
#define INERTIAL_SENSE_MESSAGE_GLONASSEPHEMERIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <inertial_sense/GTime.h>
#include <inertial_sense/GTime.h>

namespace inertial_sense
{
template <class ContainerAllocator>
struct GlonassEphemeris_
{
  typedef GlonassEphemeris_<ContainerAllocator> Type;

  GlonassEphemeris_()
    : sat(0)
    , iode(0)
    , frq(0)
    , svh(0)
    , sva(0)
    , age(0)
    , toe()
    , tof()
    , pos()
    , vel()
    , acc()
    , taun(0.0)
    , gamn(0.0)
    , dtaun(0.0)  {
      pos.assign(0.0);

      vel.assign(0.0);

      acc.assign(0.0);
  }
  GlonassEphemeris_(const ContainerAllocator& _alloc)
    : sat(0)
    , iode(0)
    , frq(0)
    , svh(0)
    , sva(0)
    , age(0)
    , toe(_alloc)
    , tof(_alloc)
    , pos()
    , vel()
    , acc()
    , taun(0.0)
    , gamn(0.0)
    , dtaun(0.0)  {
  (void)_alloc;
      pos.assign(0.0);

      vel.assign(0.0);

      acc.assign(0.0);
  }



   typedef int32_t _sat_type;
  _sat_type sat;

   typedef int32_t _iode_type;
  _iode_type iode;

   typedef int32_t _frq_type;
  _frq_type frq;

   typedef int32_t _svh_type;
  _svh_type svh;

   typedef int32_t _sva_type;
  _sva_type sva;

   typedef int32_t _age_type;
  _age_type age;

   typedef  ::inertial_sense::GTime_<ContainerAllocator>  _toe_type;
  _toe_type toe;

   typedef  ::inertial_sense::GTime_<ContainerAllocator>  _tof_type;
  _tof_type tof;

   typedef boost::array<double, 3>  _pos_type;
  _pos_type pos;

   typedef boost::array<double, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<double, 3>  _acc_type;
  _acc_type acc;

   typedef double _taun_type;
  _taun_type taun;

   typedef double _gamn_type;
  _gamn_type gamn;

   typedef double _dtaun_type;
  _dtaun_type dtaun;





  typedef boost::shared_ptr< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> const> ConstPtr;

}; // struct GlonassEphemeris_

typedef ::inertial_sense::GlonassEphemeris_<std::allocator<void> > GlonassEphemeris;

typedef boost::shared_ptr< ::inertial_sense::GlonassEphemeris > GlonassEphemerisPtr;
typedef boost::shared_ptr< ::inertial_sense::GlonassEphemeris const> GlonassEphemerisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inertial_sense::GlonassEphemeris_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::inertial_sense::GlonassEphemeris_<ContainerAllocator1> & lhs, const ::inertial_sense::GlonassEphemeris_<ContainerAllocator2> & rhs)
{
  return lhs.sat == rhs.sat &&
    lhs.iode == rhs.iode &&
    lhs.frq == rhs.frq &&
    lhs.svh == rhs.svh &&
    lhs.sva == rhs.sva &&
    lhs.age == rhs.age &&
    lhs.toe == rhs.toe &&
    lhs.tof == rhs.tof &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.taun == rhs.taun &&
    lhs.gamn == rhs.gamn &&
    lhs.dtaun == rhs.dtaun;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::inertial_sense::GlonassEphemeris_<ContainerAllocator1> & lhs, const ::inertial_sense::GlonassEphemeris_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace inertial_sense

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6e50080404485ddd899caa0ddef8be5";
  }

  static const char* value(const ::inertial_sense::GlonassEphemeris_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6e50080404485ddULL;
  static const uint64_t static_value2 = 0xd899caa0ddef8be5ULL;
};

template<class ContainerAllocator>
struct DataType< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inertial_sense/GlonassEphemeris";
  }

  static const char* value(const ::inertial_sense::GlonassEphemeris_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sat 	# satellite number \n"
"int32 iode 	# IODE (0-6 bit of tb field) \n"
"int32 frq 	# satellite frequency number \n"
"int32 svh 	# satellite health \n"
"int32 sva 	# satellite accuracy \n"
"int32 age 	# satellite age of operation \n"
"GTime toe 	# epoch of epherides (gpst) \n"
"GTime tof 	# message frame time (gpst) \n"
"float64[3] pos 	# satellite position (ecef) (m) \n"
"float64[3] vel 	# satellite velocity (ecef) (m/s) \n"
"float64[3] acc 	# satellite acceleration (ecef) (m/s^2) \n"
"float64 taun 	# SV clock bias (s) \n"
"float64 gamn 	# relative freq bias \n"
"float64 dtaun 	# delay between L1 and L2 (s) \n"
"================================================================================\n"
"MSG: inertial_sense/GTime\n"
"int64 time\n"
"float64 sec\n"
;
  }

  static const char* value(const ::inertial_sense::GlonassEphemeris_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sat);
      stream.next(m.iode);
      stream.next(m.frq);
      stream.next(m.svh);
      stream.next(m.sva);
      stream.next(m.age);
      stream.next(m.toe);
      stream.next(m.tof);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.taun);
      stream.next(m.gamn);
      stream.next(m.dtaun);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlonassEphemeris_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inertial_sense::GlonassEphemeris_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inertial_sense::GlonassEphemeris_<ContainerAllocator>& v)
  {
    s << indent << "sat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sat);
    s << indent << "iode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iode);
    s << indent << "frq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frq);
    s << indent << "svh: ";
    Printer<int32_t>::stream(s, indent + "  ", v.svh);
    s << indent << "sva: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sva);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "toe: ";
    s << std::endl;
    Printer< ::inertial_sense::GTime_<ContainerAllocator> >::stream(s, indent + "  ", v.toe);
    s << indent << "tof: ";
    s << std::endl;
    Printer< ::inertial_sense::GTime_<ContainerAllocator> >::stream(s, indent + "  ", v.tof);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "taun: ";
    Printer<double>::stream(s, indent + "  ", v.taun);
    s << indent << "gamn: ";
    Printer<double>::stream(s, indent + "  ", v.gamn);
    s << indent << "dtaun: ";
    Printer<double>::stream(s, indent + "  ", v.dtaun);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INERTIAL_SENSE_MESSAGE_GLONASSEPHEMERIS_H
