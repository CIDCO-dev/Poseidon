// Generated by gencpp from file inertial_sense/RTKInfo.msg
// DO NOT EDIT!


#ifndef INERTIAL_SENSE_MESSAGE_RTKINFO_H
#define INERTIAL_SENSE_MESSAGE_RTKINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace inertial_sense
{
template <class ContainerAllocator>
struct RTKInfo_
{
  typedef RTKInfo_<ContainerAllocator> Type;

  RTKInfo_()
    : header()
    , BaseLLA()
    , cycle_slip_count(0)
    , roverObs(0)
    , baseObs(0)
    , roverEph(0)
    , baseEph(0)
    , baseAntcount(0)  {
      BaseLLA.assign(0.0);
  }
  RTKInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , BaseLLA()
    , cycle_slip_count(0)
    , roverObs(0)
    , baseObs(0)
    , roverEph(0)
    , baseEph(0)
    , baseAntcount(0)  {
  (void)_alloc;
      BaseLLA.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 3>  _BaseLLA_type;
  _BaseLLA_type BaseLLA;

   typedef uint32_t _cycle_slip_count_type;
  _cycle_slip_count_type cycle_slip_count;

   typedef uint32_t _roverObs_type;
  _roverObs_type roverObs;

   typedef uint32_t _baseObs_type;
  _baseObs_type baseObs;

   typedef uint32_t _roverEph_type;
  _roverEph_type roverEph;

   typedef uint32_t _baseEph_type;
  _baseEph_type baseEph;

   typedef uint32_t _baseAntcount_type;
  _baseAntcount_type baseAntcount;





  typedef boost::shared_ptr< ::inertial_sense::RTKInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inertial_sense::RTKInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RTKInfo_

typedef ::inertial_sense::RTKInfo_<std::allocator<void> > RTKInfo;

typedef boost::shared_ptr< ::inertial_sense::RTKInfo > RTKInfoPtr;
typedef boost::shared_ptr< ::inertial_sense::RTKInfo const> RTKInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inertial_sense::RTKInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inertial_sense::RTKInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::inertial_sense::RTKInfo_<ContainerAllocator1> & lhs, const ::inertial_sense::RTKInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.BaseLLA == rhs.BaseLLA &&
    lhs.cycle_slip_count == rhs.cycle_slip_count &&
    lhs.roverObs == rhs.roverObs &&
    lhs.baseObs == rhs.baseObs &&
    lhs.roverEph == rhs.roverEph &&
    lhs.baseEph == rhs.baseEph &&
    lhs.baseAntcount == rhs.baseAntcount;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::inertial_sense::RTKInfo_<ContainerAllocator1> & lhs, const ::inertial_sense::RTKInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace inertial_sense

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::inertial_sense::RTKInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inertial_sense::RTKInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial_sense::RTKInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial_sense::RTKInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial_sense::RTKInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial_sense::RTKInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inertial_sense::RTKInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f06cd1205181677917f42a40817ccb4";
  }

  static const char* value(const ::inertial_sense::RTKInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f06cd1205181677ULL;
  static const uint64_t static_value2 = 0x917f42a40817ccb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::inertial_sense::RTKInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inertial_sense/RTKInfo";
  }

  static const char* value(const ::inertial_sense::RTKInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inertial_sense::RTKInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32[3] BaseLLA 			# base position in lat-lon-altitude (deg, deg, m)\n"
"uint32 cycle_slip_count 	# number of cycle slips detected\n"
"uint32 roverObs				# number of observations from rover (GPS, Glonass, Gallileo, Beidou, Qzs)\n"
"uint32 baseObs				# number of observations from base (GPS, Glonass, Gallileo, Beidou, Qzs)\n"
"uint32 roverEph				# number of ephemeris messages from rover (GPS, Glonass, Gallileo, Beidou, Qzs)\n"
"uint32 baseEph				# number of ephemeris messages from rover (GPS, Glonass, Gallileo, Beidou, Qzs)\n"
"uint32 baseAntcount			# number of base station antenna position measurements\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::inertial_sense::RTKInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inertial_sense::RTKInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.BaseLLA);
      stream.next(m.cycle_slip_count);
      stream.next(m.roverObs);
      stream.next(m.baseObs);
      stream.next(m.roverEph);
      stream.next(m.baseEph);
      stream.next(m.baseAntcount);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RTKInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inertial_sense::RTKInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inertial_sense::RTKInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "BaseLLA[]" << std::endl;
    for (size_t i = 0; i < v.BaseLLA.size(); ++i)
    {
      s << indent << "  BaseLLA[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.BaseLLA[i]);
    }
    s << indent << "cycle_slip_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cycle_slip_count);
    s << indent << "roverObs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.roverObs);
    s << indent << "baseObs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.baseObs);
    s << indent << "roverEph: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.roverEph);
    s << indent << "baseEph: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.baseEph);
    s << indent << "baseAntcount: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.baseAntcount);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INERTIAL_SENSE_MESSAGE_RTKINFO_H
