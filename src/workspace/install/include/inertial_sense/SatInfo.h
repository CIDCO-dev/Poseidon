// Generated by gencpp from file inertial_sense/SatInfo.msg
// DO NOT EDIT!


#ifndef INERTIAL_SENSE_MESSAGE_SATINFO_H
#define INERTIAL_SENSE_MESSAGE_SATINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inertial_sense
{
template <class ContainerAllocator>
struct SatInfo_
{
  typedef SatInfo_<ContainerAllocator> Type;

  SatInfo_()
    : sat_id(0)
    , cno(0)  {
    }
  SatInfo_(const ContainerAllocator& _alloc)
    : sat_id(0)
    , cno(0)  {
  (void)_alloc;
    }



   typedef uint32_t _sat_id_type;
  _sat_id_type sat_id;

   typedef uint32_t _cno_type;
  _cno_type cno;





  typedef boost::shared_ptr< ::inertial_sense::SatInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inertial_sense::SatInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SatInfo_

typedef ::inertial_sense::SatInfo_<std::allocator<void> > SatInfo;

typedef boost::shared_ptr< ::inertial_sense::SatInfo > SatInfoPtr;
typedef boost::shared_ptr< ::inertial_sense::SatInfo const> SatInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inertial_sense::SatInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inertial_sense::SatInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::inertial_sense::SatInfo_<ContainerAllocator1> & lhs, const ::inertial_sense::SatInfo_<ContainerAllocator2> & rhs)
{
  return lhs.sat_id == rhs.sat_id &&
    lhs.cno == rhs.cno;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::inertial_sense::SatInfo_<ContainerAllocator1> & lhs, const ::inertial_sense::SatInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace inertial_sense

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::inertial_sense::SatInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inertial_sense::SatInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial_sense::SatInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inertial_sense::SatInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial_sense::SatInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inertial_sense::SatInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inertial_sense::SatInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1fb6b174b603bb921293910a7f10d63";
  }

  static const char* value(const ::inertial_sense::SatInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1fb6b174b603bb9ULL;
  static const uint64_t static_value2 = 0x21293910a7f10d63ULL;
};

template<class ContainerAllocator>
struct DataType< ::inertial_sense::SatInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inertial_sense/SatInfo";
  }

  static const char* value(const ::inertial_sense::SatInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inertial_sense::SatInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 sat_id # sattelite id\n"
"uint32 cno    # Carrier to noise ratio\n"
;
  }

  static const char* value(const ::inertial_sense::SatInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inertial_sense::SatInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sat_id);
      stream.next(m.cno);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SatInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inertial_sense::SatInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inertial_sense::SatInfo_<ContainerAllocator>& v)
  {
    s << indent << "sat_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sat_id);
    s << indent << "cno: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cno);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INERTIAL_SENSE_MESSAGE_SATINFO_H
