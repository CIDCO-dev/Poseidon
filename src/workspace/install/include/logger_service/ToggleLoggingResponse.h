// Generated by gencpp from file logger_service/ToggleLoggingResponse.msg
// DO NOT EDIT!


#ifndef LOGGER_SERVICE_MESSAGE_TOGGLELOGGINGRESPONSE_H
#define LOGGER_SERVICE_MESSAGE_TOGGLELOGGINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace logger_service
{
template <class ContainerAllocator>
struct ToggleLoggingResponse_
{
  typedef ToggleLoggingResponse_<ContainerAllocator> Type;

  ToggleLoggingResponse_()
    : loggingStatus(false)  {
    }
  ToggleLoggingResponse_(const ContainerAllocator& _alloc)
    : loggingStatus(false)  {
  (void)_alloc;
    }



   typedef uint8_t _loggingStatus_type;
  _loggingStatus_type loggingStatus;





  typedef boost::shared_ptr< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ToggleLoggingResponse_

typedef ::logger_service::ToggleLoggingResponse_<std::allocator<void> > ToggleLoggingResponse;

typedef boost::shared_ptr< ::logger_service::ToggleLoggingResponse > ToggleLoggingResponsePtr;
typedef boost::shared_ptr< ::logger_service::ToggleLoggingResponse const> ToggleLoggingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::logger_service::ToggleLoggingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::logger_service::ToggleLoggingResponse_<ContainerAllocator1> & lhs, const ::logger_service::ToggleLoggingResponse_<ContainerAllocator2> & rhs)
{
  return lhs.loggingStatus == rhs.loggingStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::logger_service::ToggleLoggingResponse_<ContainerAllocator1> & lhs, const ::logger_service::ToggleLoggingResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace logger_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a9e683ce2bfe939395c449b32525bad";
  }

  static const char* value(const ::logger_service::ToggleLoggingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a9e683ce2bfe939ULL;
  static const uint64_t static_value2 = 0x395c449b32525badULL;
};

template<class ContainerAllocator>
struct DataType< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "logger_service/ToggleLoggingResponse";
  }

  static const char* value(const ::logger_service::ToggleLoggingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool loggingStatus\n"
"\n"
;
  }

  static const char* value(const ::logger_service::ToggleLoggingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.loggingStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToggleLoggingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::logger_service::ToggleLoggingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::logger_service::ToggleLoggingResponse_<ContainerAllocator>& v)
  {
    s << indent << "loggingStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loggingStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOGGER_SERVICE_MESSAGE_TOGGLELOGGINGRESPONSE_H
