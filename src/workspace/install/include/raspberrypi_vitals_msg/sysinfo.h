// Generated by gencpp from file raspberrypi_vitals_msg/sysinfo.msg
// DO NOT EDIT!


#ifndef RASPBERRYPI_VITALS_MSG_MESSAGE_SYSINFO_H
#define RASPBERRYPI_VITALS_MSG_MESSAGE_SYSINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raspberrypi_vitals_msg
{
template <class ContainerAllocator>
struct sysinfo_
{
  typedef sysinfo_<ContainerAllocator> Type;

  sysinfo_()
    : header(0.0)
    , cputemp(0.0)
    , cpuload(0.0)
    , freeram(0.0)
    , freehdd(0.0)
    , uptime(0.0)
    , vbat(0.0)
    , rh(0.0)
    , temp(0.0)
    , psi(0.0)  {
    }
  sysinfo_(const ContainerAllocator& _alloc)
    : header(0.0)
    , cputemp(0.0)
    , cpuload(0.0)
    , freeram(0.0)
    , freehdd(0.0)
    , uptime(0.0)
    , vbat(0.0)
    , rh(0.0)
    , temp(0.0)
    , psi(0.0)  {
  (void)_alloc;
    }



   typedef double _header_type;
  _header_type header;

   typedef double _cputemp_type;
  _cputemp_type cputemp;

   typedef double _cpuload_type;
  _cpuload_type cpuload;

   typedef double _freeram_type;
  _freeram_type freeram;

   typedef double _freehdd_type;
  _freehdd_type freehdd;

   typedef double _uptime_type;
  _uptime_type uptime;

   typedef double _vbat_type;
  _vbat_type vbat;

   typedef double _rh_type;
  _rh_type rh;

   typedef double _temp_type;
  _temp_type temp;

   typedef double _psi_type;
  _psi_type psi;





  typedef boost::shared_ptr< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> const> ConstPtr;

}; // struct sysinfo_

typedef ::raspberrypi_vitals_msg::sysinfo_<std::allocator<void> > sysinfo;

typedef boost::shared_ptr< ::raspberrypi_vitals_msg::sysinfo > sysinfoPtr;
typedef boost::shared_ptr< ::raspberrypi_vitals_msg::sysinfo const> sysinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator1> & lhs, const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cputemp == rhs.cputemp &&
    lhs.cpuload == rhs.cpuload &&
    lhs.freeram == rhs.freeram &&
    lhs.freehdd == rhs.freehdd &&
    lhs.uptime == rhs.uptime &&
    lhs.vbat == rhs.vbat &&
    lhs.rh == rhs.rh &&
    lhs.temp == rhs.temp &&
    lhs.psi == rhs.psi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator1> & lhs, const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raspberrypi_vitals_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edf8691ad7d4ea111d25d08805390e3b";
  }

  static const char* value(const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedf8691ad7d4ea11ULL;
  static const uint64_t static_value2 = 0x1d25d08805390e3bULL;
};

template<class ContainerAllocator>
struct DataType< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspberrypi_vitals_msg/sysinfo";
  }

  static const char* value(const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 header\n"
"float64 cputemp\n"
"float64 cpuload\n"
"float64 freeram\n"
"float64 freehdd\n"
"float64 uptime\n"
"float64 vbat\n"
"float64 rh\n"
"float64 temp\n"
"float64 psi\n"
;
  }

  static const char* value(const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cputemp);
      stream.next(m.cpuload);
      stream.next(m.freeram);
      stream.next(m.freehdd);
      stream.next(m.uptime);
      stream.next(m.vbat);
      stream.next(m.rh);
      stream.next(m.temp);
      stream.next(m.psi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sysinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspberrypi_vitals_msg::sysinfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    Printer<double>::stream(s, indent + "  ", v.header);
    s << indent << "cputemp: ";
    Printer<double>::stream(s, indent + "  ", v.cputemp);
    s << indent << "cpuload: ";
    Printer<double>::stream(s, indent + "  ", v.cpuload);
    s << indent << "freeram: ";
    Printer<double>::stream(s, indent + "  ", v.freeram);
    s << indent << "freehdd: ";
    Printer<double>::stream(s, indent + "  ", v.freehdd);
    s << indent << "uptime: ";
    Printer<double>::stream(s, indent + "  ", v.uptime);
    s << indent << "vbat: ";
    Printer<double>::stream(s, indent + "  ", v.vbat);
    s << indent << "rh: ";
    Printer<double>::stream(s, indent + "  ", v.rh);
    s << indent << "temp: ";
    Printer<double>::stream(s, indent + "  ", v.temp);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPBERRYPI_VITALS_MSG_MESSAGE_SYSINFO_H
