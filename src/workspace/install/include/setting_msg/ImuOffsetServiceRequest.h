// Generated by gencpp from file setting_msg/ImuOffsetServiceRequest.msg
// DO NOT EDIT!


#ifndef SETTING_MSG_MESSAGE_IMUOFFSETSERVICEREQUEST_H
#define SETTING_MSG_MESSAGE_IMUOFFSETSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace setting_msg
{
template <class ContainerAllocator>
struct ImuOffsetServiceRequest_
{
  typedef ImuOffsetServiceRequest_<ContainerAllocator> Type;

  ImuOffsetServiceRequest_()
    : headingOffset(0.0)
    , pitchOffset(0.0)
    , rollOffset(0.0)  {
    }
  ImuOffsetServiceRequest_(const ContainerAllocator& _alloc)
    : headingOffset(0.0)
    , pitchOffset(0.0)
    , rollOffset(0.0)  {
  (void)_alloc;
    }



   typedef double _headingOffset_type;
  _headingOffset_type headingOffset;

   typedef double _pitchOffset_type;
  _pitchOffset_type pitchOffset;

   typedef double _rollOffset_type;
  _rollOffset_type rollOffset;





  typedef boost::shared_ptr< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ImuOffsetServiceRequest_

typedef ::setting_msg::ImuOffsetServiceRequest_<std::allocator<void> > ImuOffsetServiceRequest;

typedef boost::shared_ptr< ::setting_msg::ImuOffsetServiceRequest > ImuOffsetServiceRequestPtr;
typedef boost::shared_ptr< ::setting_msg::ImuOffsetServiceRequest const> ImuOffsetServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator1> & lhs, const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.headingOffset == rhs.headingOffset &&
    lhs.pitchOffset == rhs.pitchOffset &&
    lhs.rollOffset == rhs.rollOffset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator1> & lhs, const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace setting_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13af769267c513b8010dc26e66cdc686";
  }

  static const char* value(const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13af769267c513b8ULL;
  static const uint64_t static_value2 = 0x010dc26e66cdc686ULL;
};

template<class ContainerAllocator>
struct DataType< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "setting_msg/ImuOffsetServiceRequest";
  }

  static const char* value(const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 headingOffset\n"
"float64 pitchOffset\n"
"float64 rollOffset\n"
;
  }

  static const char* value(const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.headingOffset);
      stream.next(m.pitchOffset);
      stream.next(m.rollOffset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuOffsetServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::setting_msg::ImuOffsetServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "headingOffset: ";
    Printer<double>::stream(s, indent + "  ", v.headingOffset);
    s << indent << "pitchOffset: ";
    Printer<double>::stream(s, indent + "  ", v.pitchOffset);
    s << indent << "rollOffset: ";
    Printer<double>::stream(s, indent + "  ", v.rollOffset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SETTING_MSG_MESSAGE_IMUOFFSETSERVICEREQUEST_H
